@reference './main.css';

@layer components {
  .btn {
    @apply inline-flex 
        items-center 
        justify-center 
        rounded-2xl 
        font-display
        text-lg 
        font-medium 
        transition-colors 
        focus-visible:outline-none 
        focus-visible:ring-2 
        focus-visible:ring-ring 
        focus-visible:ring-offset-2 
        disabled:pointer-events-none 
        disabled:opacity-50
        bg-yellow 
        text-black  
        uppercase 
        leading-none 
        py-4 
        px-6 
        bg-gradient-to-r 
        from-yellow 
        to-orange 
        from-50%
        text-shadow-none;
    background-size: 200% 100%;
    background-position: 0 0;
    transition: background-position 0.3s ease-in-out;
    filter: drop-shadow(5px 5px 5px --alpha(var(--color-brown-950) / 70%));
    box-shadow:
      inset 0 -6px 1px --alpha(var(--color-orange) / 50%),
      inset 0 6px 1px --alpha(var(--color-white) / 50%);
    > span {
      @apply relative z-10;
    }
    &:hover {
      background-position: 100% 0;
    }

    &.btn-ghost {
      @apply text-transparent bg-clip-text relative;
      box-shadow: none;
      > span {
        background: inherit;
      }
      &::before {
        @apply absolute inset-0 border-2 border-solid border-transparent rounded-2xl;

        background: linear-gradient(
            to right,
            var(--color-yellow) 50%,
            var(--color-orange)
          )
          border-box;
        background-size: 200% 100%;
        background-position: 0 0;
        transition: background-position 0.3s ease-in-out;
        mask:
          linear-gradient(white, white) content-box,
          linear-gradient(black, black) border-box;
        mask-composite: exclude;
        content: "";
        z-index: -1;
      }
      &::after {
        @apply absolute inset-0 rounded-2xl bg-background/50;
        transition: opacity 0.3s ease-in-out;
        opacity: 0.5;
        content: "";
        z-index: -2;
      }
      &:hover {
        &::before {
          background-position: 100% 0;
        }
        &::after {
          opacity: 1;
        }
      }
    }
    &.responsive {
      @apply max-sm:text-sm max-sm:px-3 max-sm:py-2 max-sm:rounded-lg max-md:text-base max-md:px-4 max-md:py-3;
    }
  }
  .card {
    @apply rounded-2xl bg-gradient-to-br from-neutral-700/70 to-neutral-900/50 @container backdrop-blur-2xl;
    filter: drop-shadow(5px 5px 10px --alpha(var(--color-brown-950) / 70%));
    box-shadow:
      inset 0 -6px 1px --alpha(var(--color-neutral-900) / 50%),
      inset 0 6px 1px --alpha(var(--color-white) / 20%);
    & > * {
      @apply p-6 @sm:p-10 text-shadow-lg text-shadow-brown-950/10;
    }

    &.card--secondary {
      @apply from-brown-500/70 to-brown-900/50;
      box-shadow:
        inset 0 -6px 1px --alpha(var(--color-brown-950) / 50%),
        inset 0 6px 1px --alpha(var(--color-white) / 20%);
    }
    &.glass {
      @apply backdrop-blur-sm from-neutral-500/50;
      box-shadow:
        inset 0 -6px 1px --alpha(var(--color-neutral-900) / 30%),
        inset 0 6px 1px --alpha(var(--color-white) / 10%);
    }
  }
  .grid-bg {
    background-image: url("/images/grid-bg.svg");
    background-size: 100% auto;
    background-repeat: no-repeat;
    background-position: bottom;
  }
  .noise {
    @apply absolute inset-0 pointer-events-none opacity-70 w-full h-full -z-10;
  }
  .grid-background {
    @apply absolute inset-0;
    background-image: radial-gradient(
      ellipse 110vw 45vw at bottom,
      --alpha(var(--color-orange) / 100%),
      transparent
    );
    z-index: -1;
    mask:
      radial-gradient(
        ellipse 110vw 20vw at 50% 80%,
        rgb(0 0 0 / 60%),
        transparent
      ),
      linear-gradient(to top, black, transparent 15%);
    mask-composite: add;

    &::after {
      @apply absolute inset-0;
      background: url("/images/pixel-bg.svg"), url("/images/grid_lines.svg");
      content: "";
      background-repeat: no-repeat;
      background-position: bottom;
    }
  }
}
